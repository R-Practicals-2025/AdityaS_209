identity
ele <- c(3,4,-2,4,-5,1,10,-6,5)
A <- matrix(ele, nrow = 3, ncol = 3)
A
ele <- c(5,-3,13)
B <- matrix(ele, nrow = 3, ncol = 1)
B
X = A%*%X
X = A%*%B
X
X = solve(A,B)
X #X is an matrix-array
X = solve(A,B) #Solves the linear equation A x X = B, returning X
X #X is an matrix-array
Ainv = solve(A)
Ainv
A
Ainv = solve(A)
A
Ainv
A%*%Ainv
check_inv <- Ainv%*%A # -1.110223e-16 and 2.775558e-17 are very close to zero.
check_inv #generates identity mat
results <- eigen(A)
class(results) #eigen is the class
typeof(results)
mode(results)
# eigen values
eigen_value_1 <- results$values[1]
eigen_value_2 <- results$values[2]
eigen_value_3 <- results$values[3]
X_1 <- A %*% eigen_vector_1
# eigen vectors
eigen_vector_1 <- results$vectors[,1]
eigen_vector_2 <- results$vectors[,2]
eigen_vector_3 <- results$vectors[,3]
X_1 <- A %*% eigen_vector_1
X_1
#converting to eigen form
results <- eigen(A)
class(results) #eigen is the class
typeof(results)
mode(results)
# eigen values
eigen_value_1 <- results$values[1]
eigen_value_2 <- results$values[2]
eigen_value_3
# eigen vectors
eigen_vector_1 <- results$vectors[,1]
eigen_vector_2 <- results$vectors[,2]
eigen_vector_3 <- results$vectors[,3]
X_1 <- A %*% eigen_vector_1
X_1
proof_check <- eigen_value_1 * eigen_vector_1
proof_check
proof_check <- eigen_value_1 * eigen_vector_1
proof_check
eigen_value_1
3.33712998358321+2.722008355047916i  2.10964695648685-0.712603928126751i
3.33712998358321+2.722008355047916 +  2.10964695648685-0.712603928126751
7.45618136699122-1.38409083032598+1.715081517870881
X_1
proof_check
#2.1
df$sq_gtv_time <- square(df$gtv) + df$time
head(df)
dim(df)
rownames(df) <- paste0("Row-", 1:nrow(df))
rownames(df)
#2.4
colnames(df)
df$ki <- NULL #deleting column with NULL
colnames(df)
#3
installed.packages("readxl")
library("readxl")
data <- read_excel("~/Downloads/S1_Dataset.xlsx",sheet = 1)
head(data)
colnames(data)
#3
library("readxl")
data <- read_excel("~/Downloads/S1_Dataset.xlsx",sheet = 1)
head(data)
colnames(data)
dim(data)
#4
a = 15.0
b = 110.0
c = 115.0
d = 120.0
e = 125.0
f = 130.0
g = 135.0
#creating set
A <- c("a", "b", "c", "d", "e")
B <- c("d", "e", "f", "g")
union_set <- union(A, B)
print(paste("unionset:" , union_set))
intersect(A,B)
setdiff(A,B)
setequal(A,B)
setA[A %in% B]
union_set[A %in% B]
elaborate_union <- c(setdiff(A, b), intersect(A, B), setdiff(A, B))
elaborate_union
elaborate_union
setequal(elaborate_union, union(A, B))
#Elements of B present in A
list(intersect(B,A))
#Elements of B present in A
intersect(A,B)
#5
vec_elem <- c(8,10,12,7,14,16,2,4,9,19,20,3,6)
for (i in vec_elem) {
if (i >12) {
print(i)
}
}
for (i in vec_elem) {
if ( i < 20 && i > 10 ) {
print(i)
}
}
# 5.2
A <- c(2,7,29,32,41,11,15,NA,NA,55,32,NA,42,109)
A[!is.na(A) & A < 100]
#5.3
A[is.na(A)] <-  0
A
genename <- paste0("gene-", 1:7)
genename
gender <- c("M","M","F","M","F","F","M")
#5.5
result1 = c(12.3, 11.5, 13.6, 15.4, 9.4, 8.1, 10.0)
result2 = c(22.1, 25.7, 32.5, 42.5, 12.6, 15.5, 17.6)
result3 = c(15.5, 13.4, 11.5, 21.7, 14.5, 16.5, 12.1)
result4 = c(14.4, 16.6, 45.0, 11.0, 9.7, 10.0, 12.5)
result5 = c(12.2, 15.5, 17.4, 19.4, 10.2, 9.8, 9.0)
result6 = c(13.3, 14.5, 21.6, 17.9, 15.6, 14.4, 12.0)
result7 = c(11.0, 10.0, 12.2, 14.3, 23.3, 19.8, 13.4)
# 5.7
df_data <- data.frame(genename, gender, result1, result2, result3, result4, result5, result6, result7)
colnames(df_data) <- c("GeneName", "Gender", paste("expt", 1:7, sep=""))
colnames(df_data) <- c("GeneName", "Gender", paste("expt", 1:7, sep=""))
datframe = df_data
datframe
expt2_les_30 <- datframe[datframe$expt2 <30,]
angle = 75
##check the quadrant
check_quad <- function(x) {
angle <- x %% 360  # Normalize angle within 0-360
if (angle == 0) {
return("On the positive x-axis")
} else if (angle <= 90) {
return("First quadrant")
} else if (angle <= 180) {
return("Second quadrant")
} else if (angle <= 270) {
return("Third quadrant")
} else {
return("Fourth quadrant")
}
}
check_quad(280)
num_dec_order <- function(x,y,z) {
if (x > y & y > z){
print(c(x, y, z))
} else if (x > z & z > y){
print(c(x, z, y))
} else if (y > x & x > z){
print(c(y, x, z))
} else if (y > z & z > x){
print(c(y, z, x))
} else if (z > x & x > y){
print(c(z, x, y))
} else if (z > y & y > x){
print(c(z, y, x))
}
}
num_dec_order(3,1,6)
ticket_cost <- function(distance, age){
cost = min_cost = 100
if (distance > 100 && distance <= 1000){
cost = min_cost + (1.50*(distance-100))
}
if (age > 60) {
cost = cost*0.75
} else if(age <= 6){
cost = cost*0.5
}
return(cost)
}
ticket_cost(110,4)
replace_neg <- function(x) {
x[x < 0] <- 0
return(x)
}
test <- c(-2,-1,0,1,2)
replace_neg(test)
# 7.2 function to calculate the factorial of a number using the Stirlingâ€™s approximation
factor_stirling <- function(n){
term1 <- (n^n * exp(-n) * sqrt(2*pi*n))
term2 <- 1
term3 <- (1 / (12*n))
term4 <- (1 / (288 * n^2))
term5 <- (139 / (51840 * n^3))
term6 <- (571 / (2488320* n^4))
brackets <- term2 + term3 + term4 - term5 - term6
result <- term1 * brackets
return(result)
}
factor_stirling(2)
# 7.3  sum the digits of a number
sum_digits <- function(x){
result <- 0
digits <- as.numeric(strsplit(as.character(x), "")[[1]])
for (i in 1:length(digits)){
result <- result + digits[i]
}
print(result)
}
sum_digits(221)
library(stringr)
library(readr)
num = 456785
num2 = 12321
library(readr)
library(stringr)
library(readr)
num = 456785
num2 = 12321
#function for checking palindrome
checkpalindome <- function(n){
n <- as.character(n)
rever <- sapply(lapply(strsplit(x = n, split = NULL), rev), paste, collapse="")
ifelse (rever==int2, yes = paste(int2," is a palindrome"), no = "This is not a palindrome")
}
checkpalindome(num2)
str = "seemerightnow"
checkpalindome(num2)
reverse <- checkpalindome(num2)
#function for checking palindrome
checkpalindome <- function(n){
n <- as.character(n)
rever <- sapply(lapply(strsplit(x = n, split = NULL), rev), paste, collapse="")
}
reverse <- checkpalindome(num2)
rm(reverse)
reverse_num <- checkpalindome(num2)
ifelse (reverse_num==int2, yes = paste(int2," is a palindrome"), no = "This is not a palindrome")
ifelse (reverse_num==num2, yes = paste(num2," is a palindrome"), no = "This is not a palindrome")
num2 = 12322
#function for checking palindrome
checkpalindome <- function(n){
n <- as.character(n)
rever <- sapply(lapply(strsplit(x = n, split = NULL), rev), paste, collapse="")
}
reverse_num <- checkpalindome(num2)
ifelse (reverse_num==num2, yes = paste(num2," is a palindrome"), no = "This is not a palindrome")
num2 = 12321
#function for checking palindrome
checkpalindome <- function(n){
n <- as.character(n)
rever <- sapply(lapply(strsplit(x = n, split = NULL), rev), paste, collapse="")
}
reverse_num <- checkpalindome(num2)
ifelse (reverse_num==num2, yes = paste(num2," is a palindrome"), no = "This is not a palindrome")
str = "seemerightnow"
t(sapply(lapply(strsplit(str,split = ""), paste), paste))
##printing
substring(str,first = 1,last = 3)
substring(str,first = 4,last =5)
substring(str,first = 6,last =10)
#3 GC content
nucl <- "ATTGCGCATAGTCCGGG"
#fraction table
freq_tab <-  table(sapply(strsplit(nucl, split = ""),paste))
seq_split <- strsplit(nucl, split = "")
total <- sum(freq_tab)
C_fraction  <-  sum(seq_split[[1]]=="C") / total
G_fraction  <-  sum(seq_split[[1]]=="G") / total
#3 GC content
nucl <- "ATTGCGCATAGTCCGGG"
#fraction table
freq_tab <-  table(sapply(strsplit(nucl, split = ""),paste))
seq_split <- strsplit(nucl, split = "")
total <- sum(freq_tab)
#fraction table
freq_tab <-  table(sapply(strsplit(nucl, split = ""),paste))
total <- sum(freq_tab[[1]])
total <- total(freq_tab)
#fraction table
freq_tab <-  table(sapply(strsplit(nucl, split = ""),paste))
freq_tab
total <- sum(c(freq_tab[1]))
freq_tab
freq_tab[[1]]
freq_tab[1]
freq_tab[[1]]
freq_tab[[c(1:length(freq_tab))]]
freq_tab[c(1:length(freq_tab))]
#fraction table
freq_tab <-  table(sapply(strsplit(nucl, split = ""),paste))
freq_tab
freq_tab
seq_split <- strsplit(nucl, split = "")
seq_split
seq_split <- strsplit(nucl, split = "")
seq_split
#3 GC content
nucl <- "ATTGCGCATAGTCCGGG"
#fraction table
freq_tab <-  table(sapply(strsplit(nucl, split = ""),paste))
seq_split <- strsplit(nucl, split = "")
seq_split
total <- sum(freq_tab)
#fraction table
freq_tab <-  table(sapply(strsplit(nucl, split = ""),paste))
seq_split <- strsplit(nucl, split = "")
seq_split
freq_tab[1]
rm(sum)
library(stringr)
library(readr)
library(moments)
library(stringr)
library(readr)
library(moments)
#3 GC content
nucl <- "ATTGCGCATAGTCCGGG"
#fraction table
freq_tab <-  table(sapply(strsplit(nucl, split = ""),paste))
seq_split <- strsplit(nucl, split = "")
seq_split
freq_tab
total <- sum(freq_tab)
total
C_fraction  <-  sum(seq_split[[1]]=="C") / total
G_fraction  <-  sum(seq_split[[1]]=="G") / total
paste("C fraction :",C_fraction)
paste("G fraction :",G_fraction)
#4Palindrome with complementary sequence
seq_dna="TGGATCCA"
given_compl_seq = "ACCTAGGT"
splt_sseq <- strsplit(seq_dna, NULL)[[1]]
splt_sseq
##create empty string
compl_seq <- ""
for (i in 1:nchar(seq_dna)) {
if (splt_sseq[i]== "A") {compl_seq <- c(compl_seq,"T")  }
if (splt_sseq[i]== "T") {compl_seq <- c(compl_seq,"A")  }
if (splt_sseq[i]== "G") {compl_seq <- c(compl_seq,"C")  }
if (splt_sseq[i]== "C") {compl_seq <- c(compl_seq,"G")  }
}
compl_seq  <- paste(compl_seq, collapse = "")
compl_seq
check_palindrome_dna <- function(strand1, strand2) {
rever <- paste(rev(strsplit(strand2, NULL)[[1]]), collapse = "")
if (rever == strand1) {
return(paste(strand1, "is a palindrome"))
} else {
return("This is not a palindrome")
}
}
#reverse the complementary sequence
check_palindrome_dna(seq_dna,compl_seq)
#5  find the largest
string ="She sells hundreds of sea oysters on the sea shore."
words <- strsplit(string,split = " ")[[1]]
check_word_length_ord <- function(sentence, index=1){
words <- strsplit(string,split = " ")[[1]]
sorted_array <- sort(nchar(words),decreasing = T)
for (i in 1:length(words)) {
word_len = length(lapply(strsplit(words[i], NULL), paste)[[1]])
if (sorted_array[index]==word_len) {
x <- paste(words[i], "This is the",index, "rd largest words")
print(x)
}
}
}
check_word_length_ord(sentence = string, index=2)
check_word_length_ord <- function(sentence, index=1){
words <- strsplit(string,split = " ")[[1]]
sorted_array <- sort(nchar(words),decreasing = T)
#iterate thorugh each word,
for (i in 1:length(words)) {
word_len = length(lapply(strsplit(words[i], NULL), paste)[[1]])
if (sorted_array[index]==word_len) {
x <- paste(words[i], "This is the",index, "rd largest words")
print(x)
}
}
}
check_word_length_ord(sentence = string, index=2)
#6
df = as.data.frame(read.table(file='~/NR_Aditya/course_work/sem2/Biostatistics/worldfloras.txt',header=TRUE))
#6
df = as.data.frame(read.table(file="~/Downloads/worldfloras.txt",header=TRUE))
dim(df)
class(df$Country)
df$Continent <- as.factor(x = df$Continent)
table(df$Continent)
Continent_list <- levels(df$Continent)
Continent_list
### saving subset dataframe in a list
df_new <- list() #create a new list
for (i in 1:length(Continent_list)) {
df_name <- paste(Continent_list[i])
var_name <- paste(Continent_list[i])
assign(df_name , as.data.frame(df[which(df$Continent == var_name),]))
}
par(mfrow=c(3,4))
library(moments)
for (i in 1:length(Continent_list)) {
df_name <- paste(Continent_list[i])
var_name <- Continent_list[i]
df_subs <- df[which(df$Continent==var_name),]
par(mfrow=c(1,3))
boxplot(df_subs$Flora, main=df_name)
cat("\n")
print(paste(var_name))
##statistics
#mean
mu = mean(df_subs$Flora)
print( paste("Mean: ",mu))
#std dev
std_dev = sd(df_subs$Flora)
print( paste("Std dev: ",std_dev))
#skewness
skw = skewness(df_subs$Flora)
print( paste("skewness: ",skw))
#kurtosis
kut = kurtosis(df_subs$Flora)
print( paste("kurtosis: ",kut))
boxplot(df_subs$Population, main=paste(df_name,"Population distribution"))
hist(df_subs$Population, main=paste(df_name,"Population distribution"))
}
for (i in 1:length(Continent_list)) {
df_name <- paste(Continent_list[i])
var_name <- Continent_list[i]
df_subs <- df[which(df$Continent==var_name),]
par(mfrow=c(1,3))
boxplot(df_subs$Flora, main=df_name)
cat("\n")
print(paste(var_name))
##statistics
#mean
mu = mean(df_subs$Flora)
print( paste("Mean: ",mu))
#std dev
std_dev = sd(df_subs$Flora)
print( paste("Std dev: ",std_dev))
#skewness
skw = skewness(df_subs$Flora)
print( paste("skewness: ",skw))
#kurtosis
kut = kurtosis(df_subs$Flora)
print( paste("kurtosis: ",kut))
boxplot(df_subs$Population, main=paste(df_name,"Population distribution"))
hist(df_subs$Population, main=paste(df_name,"Population distribution"))
}
# Remove empty rows
df <- read.table("~/NR_Aditya/course_work/sem2/Biostatistics/HumanBones.txt", sep = "\n", stringsAsFactors = FALSE, fill = TRUE, header = FALSE)
# Remove empty rows
df <- read.table("~/Downloads/HumanBones.txt", sep = "\n", stringsAsFactors = FALSE, fill = TRUE, header = FALSE)
df <- df[df$V1 != "", , drop = FALSE]  # Remove empty rows
# Assign categories
#separating which do not contains opening parenthesis
df$category <- cumsum(x = !grepl("\\(", x = df$V1))
df$category <- ave(x = df$V1, ... = df$category, FUN = function(x) x[1])  ## aggregating and grouping data from each category
df
# Extract bone names and counts
df$bone <- gsub(" \\(.*\\)", "", df$V1) # replacing anything inside parenthesis and saving in another column
df
df
# Extract bone names and counts
df$bone <- gsub(" \\(.*\\)", "", df$V1) # replacing anything inside parenthesis and saving in another column
df
df$count <- as.numeric(gsub(pattern = ".*\\((\\d+)\\)", replacement = "\\1", x = df$V1)) #matching digits and replacing with 1
# Extract bone names and counts
df$bone <- gsub(" \\(.*\\)", "", df$V1) # replacing anything inside parenthesis and saving in another column
df
df$count <- as.numeric(gsub(pattern = ".*\\((\\d+)\\)", replacement = "\\1", x = df$V1)) #matching digits and replacing with 1
df
df$count[is.na(df$count)] <- 1  # Assign 1 if count is missing
df
# Final formatting
df <- df[, c("category", "bone", "count")] #setting column names
df
# (8) Category with max bones
freq <- aggregate(count ~ category, df, sum)
freq
max_category <- freq[which.max(freq$count), ]
max_category
par(mfrow=c(1,1))
barplot(freq$count, names.arg = freq$category, las = 2)
#9 Subset legs & bones > 5 letters
legs <- subset(df, category == "Legs")
legs <-  df[df$category == "Legs",]
long_bones <- legs$bone[nchar(legs$bone) > 5]
print(long_bones)
#10 Bones starting with "M" & replace 'a' with 'A'
m_bones <- grep(pattern = "^M", x = df$bone, value = T)
m_bones <- gsub(pattern = "a", replacement = "A", m_bones)
print(m_bones)
#11 Bones ending with "e" to lowercase
e_bones <- grep("e$", df$bone, value = T)
e_bones <- tolower(e_bones)
print(e_bones)
#12 Bones with two "o"s
oo_bones <- grep("o.*o", df$bone, value = T)
print(oo_bones)
